plugins {
  id 'java'
  id 'application'
  id 'org.javamodularity.moduleplugin' version '1.8.12'
  id 'org.openjfx.javafxplugin' version '0.0.13'
  id 'org.beryx.jlink' version '2.25.0'
  id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group 'org.example'
version '1'

repositories {
  mavenCentral()
}

ext {
  junitVersion = '5.10.0'
  javafxVersion = '19'
  javafxPlatform = org.gradle.internal.os.OperatingSystem.current().isWindows() ? 'win' :
          org.gradle.internal.os.OperatingSystem.current().isLinux() ? 'linux' : 'mac'
}

sourceCompatibility = '19'
targetCompatibility = '19'

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

javafx {
  version = javafxVersion
  modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {
  implementation "org.openjfx:javafx-controls:${javafxVersion}"
  implementation "org.openjfx:javafx-fxml:${javafxVersion}"

  runtimeOnly "org.openjfx:javafx-controls:${javafxVersion}:${javafxPlatform}"
  runtimeOnly "org.openjfx:javafx-fxml:${javafxVersion}:${javafxPlatform}"

  implementation 'org.controlsfx:controlsfx:11.1.2'
  implementation('net.synedra:validatorfx:0.4.0') {
    exclude(group: 'org.openjfx')
  }
  implementation 'org.kordamp.bootstrapfx:bootstrapfx-core:0.4.0'

  testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
}

application {
  mainModule = 'org.example.algorithmgrader'
  mainClass = 'org.example.algorithmgrader.Main'
}

tasks.jar {
  enabled = false
  manifest {
    attributes 'Main-Class': application.mainClass
  }
}

tasks.named('shadowJar') {
  archiveBaseName.set("AlgorithmGrader")
  archiveClassifier.set("")
  archiveVersion.set("1")

  manifest {
    attributes["Main-Class"] = application.mainClass
  }

  mergeServiceFiles()

  doFirst {
    from {
      project.configurations.named("runtimeClasspath").get().collect {
        it.isDirectory() ? it : zipTree(it)
      }
    }
  }
}
tasks.named('distZip') {
  dependsOn(tasks.named('shadowJar'))
}

tasks.named('distTar') {
  dependsOn(tasks.named('shadowJar'))
}

tasks.named('startScripts') {
  dependsOn(tasks.named('shadowJar'))
}
run {

  classpath = sourceSets.main.runtimeClasspath
  jvmArgs = [
          '--module-path', classpath.asPath,
          '--add-modules', 'javafx.controls,javafx.fxml'
  ]
}
test {
  useJUnitPlatform()
}

jlink {
  imageZip = project.file("${buildDir}/distributions/app-${javafxPlatform}.zip")
  options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
  launcher {
    name = 'app'
  }
}

jlinkZip {
  group = 'distribution'
}
